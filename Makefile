# FleetTracker Pro Backend Makefile
# Indonesian Fleet Management SaaS Application

# Environment variables
DATABASE_URL ?= postgres://fleettracker:password123@localhost:5432/fleettracker?sslmode=disable
TIMESERIES_URL ?= postgres://fleettracker:password123@localhost:5433/fleettracker_timeseries?sslmode=disable

.PHONY: help build run test clean docker-up docker-down migrate swagger

# Default target
help:
	@echo "FleetTracker Pro Backend - Available Commands:"
	@echo ""
	@echo "üöÄ Development:"
	@echo "  build          - Build the backend application"
	@echo "  run            - Run the backend server"
	@echo "  test           - Run tests"
	@echo "  clean          - Clean build artifacts"
	@echo "  dev            - Start Docker + run dev server"
	@echo ""
	@echo "üê≥ Docker Commands:"
	@echo "  docker-setup             - Full setup (clean + rebuild + up)"
	@echo "  docker-up                - Start all services"
	@echo "  docker-down              - Stop all services"
	@echo "  docker-restart           - Restart all services"
	@echo "  docker-clean             - Stop and remove volumes"
	@echo "  docker-rebuild           - Rebuild all containers"
	@echo "  docker-rebuild-backend   - Rebuild backend only"
	@echo "  docker-update-backend    - Rebuild + restart backend"
	@echo "  docker-status            - Show container status"
	@echo "  docker-check             - Check Docker environment"
	@echo ""
	@echo "üìã Docker Logs:"
	@echo "  docker-logs            - Show all logs (follow)"
	@echo "  docker-logs-postgres   - Show PostgreSQL logs"
	@echo "  docker-logs-timescale  - Show TimescaleDB logs"
	@echo "  docker-logs-redis      - Show Redis logs"
	@echo "  docker-logs-backend    - Show Backend logs"
	@echo ""
	@echo "üîß Docker Shell Access:"
	@echo "  docker-shell-postgres  - Connect to PostgreSQL"
	@echo "  docker-shell-timescale - Connect to TimescaleDB"
	@echo "  docker-shell-redis     - Connect to Redis CLI"
	@echo "  docker-shell-backend   - Connect to backend container"
	@echo ""
	@echo "üíæ Database Management:"
	@echo "  docker-backup-postgres   - Backup PostgreSQL"
	@echo "  docker-backup-timescale  - Backup TimescaleDB"
	@echo "  docker-restore-postgres  - Restore PostgreSQL (FILE=...)"
	@echo ""
	@echo "üóÑÔ∏è  Database Migrations & Seeds:"
	@echo "  migrate-up               - Apply pending migrations"
	@echo "  migrate-down             - Rollback last migration"
	@echo "  migrate-version          - Show current version"
	@echo "  migrate-create NAME=...  - Create new migration"
	@echo "  seed                     - Populate with test data"
	@echo "  seed-companies           - Seed companies only"
	@echo "  seed-users               - Seed users only"
	@echo "  db-reset                 - Drop, migrate, seed (CAUTION)"
	@echo "  db-status                - Show database info"
	@echo ""
	@echo "üìö Documentation:"
	@echo "  swagger          - Generate API documentation"
	@echo "  swagger-install  - Install Swagger CLI tool"
	@echo ""
	@echo "üáÆüá© Indonesian Market Features:"
	@echo "  qris-test  - Test QRIS payment integration"
	@echo "  gps-test   - Test GPS tracking functionality"
	@echo "  compliance - Check Indonesian compliance"

# Build the application
build:
	@echo "üî® Building FleetTracker Pro Backend..."
	go build -o bin/main cmd/server/main.go
	@echo "‚úÖ Build completed successfully!"

# Run the application
run:
	@echo "üöÄ Starting FleetTracker Pro Backend..."
	@echo "üáÆüá© Indonesian Fleet Management SaaS Ready!"
	go run cmd/server/main.go

# Run tests
test:
	@echo "üß™ Running tests..."
	go test -v ./...

# Clean build artifacts
clean:
	@echo "üßπ Cleaning build artifacts..."
	rm -f bin/main
	rm -rf dist/
	@echo "‚úÖ Clean completed!"

# Start development environment
docker-up:
	@echo "üê≥ Starting development environment..."
	@echo "üìä PostgreSQL with PostGIS: localhost:5432"
	@echo "‚è∞ TimescaleDB: localhost:5433"
	@echo "üî¥ Redis: localhost:6379"
	@echo "üóÑÔ∏è pgAdmin: http://localhost:5050"
	@echo "üîß Redis Commander: http://localhost:8081"
	@docker-compose up -d || (echo "‚ùå Failed to start services. Check logs with 'make docker-logs'" && exit 1)
	@echo "‚úÖ Development environment started!"
	@echo "‚è≥ Waiting for services to be healthy..."
	@sleep 10
	@echo "üìä Checking service status..."
	@docker-compose ps
	@echo "‚úÖ Services ready!"

# Stop development environment
docker-down:
	@echo "üõë Stopping development environment..."
	docker-compose down
	@echo "‚úÖ Development environment stopped!"

# Stop and remove volumes
docker-clean:
	@echo "üßπ Stopping and cleaning Docker environment..."
	docker-compose down -v
	@echo "‚úÖ Docker environment cleaned!"

# Rebuild Docker containers
docker-rebuild:
	@echo "üîÑ Rebuilding Docker containers..."
	docker-compose build --no-cache
	@echo "‚úÖ Containers rebuilt!"

# Rebuild only backend container
docker-rebuild-backend:
	@echo "üîÑ Rebuilding backend container..."
	docker-compose build --no-cache backend
	@echo "‚úÖ Backend container rebuilt!"
	@echo "Run 'make docker-restart' to apply changes"

# Full backend update (rebuild + restart)
docker-update-backend:
	@echo "üîÑ Updating backend (rebuild + restart)..."
	docker-compose build --no-cache backend
	docker-compose up -d --force-recreate backend
	@echo "‚úÖ Backend updated!"
	@echo "‚è≥ Waiting for backend to be healthy..."
	@sleep 10
	@echo "üìö Swagger should be available at: http://localhost:8080/swagger/index.html"

# Restart all services
docker-restart:
	@echo "üîÑ Restarting Docker services..."
	docker-compose restart
	@echo "‚úÖ Services restarted!"

# Show Docker container status
docker-status:
	@echo "üìä Docker Container Status:"
	@docker-compose ps

# Show Docker logs
docker-logs:
	@echo "üìã Showing Docker logs (Ctrl+C to exit)..."
	docker-compose logs -f

# Show specific service logs
docker-logs-postgres:
	@docker-compose logs -f postgres

docker-logs-timescale:
	@docker-compose logs -f timescaledb

docker-logs-redis:
	@docker-compose logs -f redis

docker-logs-backend:
	@docker-compose logs -f backend

# Execute commands in containers
docker-shell-postgres:
	@echo "üêò Connecting to PostgreSQL..."
	docker exec -it fleettracker-postgres psql -U fleettracker -d fleettracker

docker-shell-timescale:
	@echo "‚è∞ Connecting to TimescaleDB..."
	docker exec -it fleettracker-timescaledb psql -U fleettracker -d fleettracker_timeseries

docker-shell-redis:
	@echo "üî¥ Connecting to Redis..."
	docker exec -it fleettracker-redis redis-cli

docker-shell-backend:
	@echo "üîß Connecting to backend container..."
	docker exec -it fleettracker-backend sh

# Backup database
docker-backup-postgres:
	@echo "üíæ Backing up PostgreSQL database..."
	@mkdir -p backups
	docker exec fleettracker-postgres pg_dump -U fleettracker fleettracker > backups/postgres_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Backup saved to backups/"

docker-backup-timescale:
	@echo "üíæ Backing up TimescaleDB database..."
	@mkdir -p backups
	docker exec fleettracker-timescaledb pg_dump -U fleettracker fleettracker_timeseries > backups/timescale_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Backup saved to backups/"

# Restore database
docker-restore-postgres:
	@echo "üîÑ Restoring PostgreSQL database..."
	@echo "‚ö†Ô∏è  Usage: make docker-restore-postgres FILE=backups/postgres_XXXXXX.sql"
	@if [ -z "$(FILE)" ]; then \
		echo "‚ùå Error: Please specify FILE=path/to/backup.sql"; \
		exit 1; \
	fi
	@cat $(FILE) | docker exec -i fleettracker-postgres psql -U fleettracker fleettracker
	@echo "‚úÖ Database restored!"

# Check Docker environment
docker-check:
	@echo "üîç Checking Docker environment..."
	@echo ""
	@echo "Docker version:"
	@docker --version
	@echo ""
	@echo "Docker Compose version:"
	@docker-compose --version
	@echo ""
	@echo "Running containers:"
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
	@echo ""
	@echo "‚úÖ Docker environment check completed!"

# Full Docker setup (first time)
docker-setup: docker-clean docker-rebuild docker-up
	@echo "üéâ Docker environment fully set up!"
	@echo ""
	@echo "Available services:"
	@echo "  - PostgreSQL: localhost:5432"
	@echo "  - TimescaleDB: localhost:5433"
	@echo "  - Redis: localhost:6379"
	@echo "  - pgAdmin: http://localhost:5050"
	@echo "  - Redis Commander: http://localhost:8081"
	@echo "  - Backend API: http://localhost:8080"
	@echo ""
	@echo "pgAdmin credentials:"
	@echo "  Email: admin@fleettracker.id"
	@echo "  Password: admin123"

# Run database migrations (using psql inside Docker to avoid connection issues)
migrate-up:
	@echo "üóÑÔ∏è Running database migrations..."
	@for file in migrations/*_*.up.sql; do \
		echo "Applying $$file..."; \
		docker exec -i fleettracker-postgres psql -U fleettracker -d fleettracker < $$file || exit 1; \
	done
	@echo "‚úÖ Migrations completed!"

migrate-down:
	@echo "üîÑ Rolling back migrations..."
	@echo "‚ö†Ô∏è  Manual rollback: Run the .down.sql files in reverse order"
	@echo "Example: docker exec -i fleettracker-postgres psql -U fleettracker -d fleettracker < migrations/001_initial_schema.down.sql"

migrate-force:
	@echo "‚ö†Ô∏è  Not applicable with psql-based migrations"
	@echo "To reset: make db-reset"

migrate-version:
	@echo "üìä Checking if tables exist..."
	@docker exec fleettracker-postgres psql -U fleettracker -d fleettracker -c "SELECT COUNT(*) as tables FROM information_schema.tables WHERE table_schema = 'public';" || echo "No tables yet"

migrate-create:
	@echo "üìù Creating new migration: $(NAME)..."
	@migrate create -ext sql -dir migrations -seq $(NAME)
	@echo "‚úÖ Migration files created!"

# Legacy command (redirects to migrate-up)
migrate: migrate-up

# Seed database with test data
# Note: Run from inside Docker network since Windows path issues
seed:
	@echo "üå± Seeding database with test data..."
	@echo "Note: Seeding directly via psql due to connection issues from host"
	@docker exec fleettracker-postgres psql -U fleettracker -d fleettracker -c "\
		INSERT INTO companies (name, email, npwp, city, province, country) \
		SELECT 'PT Fleet Indonesia', 'contact@fleet.id', '01.234.567.8-901.000', 'Jakarta', 'DKI Jakarta', 'Indonesia' \
		WHERE NOT EXISTS (SELECT 1 FROM companies WHERE email = 'contact@fleet.id');"
	@echo "‚úÖ Basic seed data inserted! For full seeding, use the seed container or run seeds manually"
	@echo "   Or connect to pgAdmin and run seed scripts there"

seed-companies:
	@echo "üè¢ Seeding companies only..."
	@DATABASE_URL="postgres://fleettracker:password123@localhost:5432/fleettracker?sslmode=disable" go run cmd/seed/main.go --companies
	@echo "‚úÖ Companies seeded!"

seed-users:
	@echo "üë• Seeding users only..."
	@DATABASE_URL="postgres://fleettracker:password123@localhost:5432/fleettracker?sslmode=disable" go run cmd/seed/main.go --users
	@echo "‚úÖ Users seeded!"

# Database reset (drop, migrate, seed)
db-reset:
	@echo "‚ôªÔ∏è  Resetting database..."
	@echo "‚ö†Ô∏è  This will delete ALL data!"
	@read -p "Continue? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		$(MAKE) migrate-down || true; \
		$(MAKE) migrate-up; \
		$(MAKE) seed; \
		echo "‚úÖ Database reset complete!"; \
	else \
		echo "‚ùå Reset cancelled"; \
	fi

# Show database status
db-status:
	@echo "üìä Database Status:"
	@echo ""
	@echo "Migration Version:"
	@$(MAKE) migrate-version
	@echo ""
	@echo "Database Connection:"
	@docker exec fleettracker-postgres psql -U fleettracker -d fleettracker -c "SELECT COUNT(*) as tables FROM information_schema.tables WHERE table_schema = 'public';"
	@echo ""
	@echo "Quick Data Count:"
	@docker exec fleettracker-postgres psql -U fleettracker -d fleettracker -c "SELECT 'companies' as table_name, COUNT(*) as count FROM companies UNION ALL SELECT 'users', COUNT(*) FROM users UNION ALL SELECT 'vehicles', COUNT(*) FROM vehicles UNION ALL SELECT 'drivers', COUNT(*) FROM drivers;" || echo "Tables not yet created"

# Generate Swagger documentation
swagger:
	@echo "üìö Generating API documentation..."
	swag init -g cmd/server/main.go -o docs --parseDependency --parseInternal
	@echo "‚úÖ Documentation generated at docs/"
	@echo "üìù View at: http://localhost:8080/swagger/index.html"

# Install Swagger CLI tool
swagger-install:
	@echo "üì¶ Installing Swagger CLI..."
	go install github.com/swaggo/swag/cmd/swag@latest
	@echo "‚úÖ Swagger CLI installed!"

# Test QRIS payment integration
qris-test:
	@echo "üí≥ Testing QRIS payment integration..."
	@echo "TODO: Implement QRIS testing"
	@echo "‚úÖ QRIS test completed!"

# Test GPS tracking functionality
gps-test:
	@echo "üìç Testing GPS tracking functionality..."
	@echo "TODO: Implement GPS testing"
	@echo "‚úÖ GPS test completed!"

# Development workflow
dev: docker-up
	@echo "üîÑ Waiting for services to start..."
	@sleep 5
	@echo "üöÄ Starting development server..."
	$(MAKE) run

# Production build
prod-build:
	@echo "üè≠ Building for production..."
	CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o bin/main cmd/server/main.go
	@echo "‚úÖ Production build completed!"

# Install development dependencies
install-dev:
	@echo "üì¶ Installing development dependencies..."
	go install github.com/cosmtrek/air@latest
	go install github.com/swaggo/swag/cmd/swag@latest
	@echo "‚úÖ Development dependencies installed!"
	@echo ""
	@echo "Generate Swagger docs with: make swagger"

# Format code
fmt:
	@echo "üé® Formatting code..."
	go fmt ./...
	@echo "‚úÖ Code formatted!"

# Lint code
lint:
	@echo "üîç Linting code..."
	@echo "TODO: Install and run golangci-lint"
	@echo "‚úÖ Code linted!"

# Security scan
security:
	@echo "üîí Running security scan..."
	@echo "TODO: Install and run gosec"
	@echo "‚úÖ Security scan completed!"

# Performance test
perf-test:
	@echo "‚ö° Running performance tests..."
	@echo "TODO: Implement performance testing"
	@echo "‚úÖ Performance test completed!"

# Indonesian compliance check
compliance:
	@echo "üáÆüá© Checking Indonesian compliance..."
	@echo "‚úÖ Data residency: Enforced"
	@echo "‚úÖ Currency: Indonesian Rupiah (IDR)"
	@echo "‚úÖ Language: Bahasa Indonesia"
	@echo "‚úÖ Payment: QRIS integration ready"
	@echo "‚úÖ Compliance check completed!"

# Full CI pipeline
ci: clean fmt lint test security compliance build
	@echo "üéâ CI pipeline completed successfully!"

# Show logs
logs:
	@echo "üìã Showing application logs..."
	docker-compose logs -f backend

# Database backup
backup:
	@echo "üíæ Creating database backup..."
	@echo "TODO: Implement backup system"
	@echo "‚úÖ Backup completed!"

# Database restore
restore:
	@echo "üîÑ Restoring database..."
	@echo "TODO: Implement restore system"
	@echo "‚úÖ Restore completed!"

# Health check
health:
	@echo "üè• Checking service health..."
	@curl -f http://localhost:8080/health || echo "‚ùå Service not healthy"
	@echo "‚úÖ Health check completed!"
