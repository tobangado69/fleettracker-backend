name: FleetTracker Pro - Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: fleettracker
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: fleettracker
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run database migrations
        env:
          DATABASE_URL: postgres://fleettracker:password123@localhost:5432/fleettracker?sslmode=disable
        run: |
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          migrate -path migrations -database "$DATABASE_URL" up

      - name: Run unit tests
        env:
          DATABASE_URL: postgres://fleettracker:password123@localhost:5432/fleettracker?sslmode=disable
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./internal/auth/...
          go test -v -race -coverprofile=coverage-tracking.out -covermode=atomic ./internal/tracking/...
          go test -v -race -coverprofile=coverage-payment.out -covermode=atomic ./internal/payment/...
          go test -v -race -coverprofile=coverage-vehicle.out -covermode=atomic ./internal/vehicle/...
          go test -v -race -coverprofile=coverage-driver.out -covermode=atomic ./internal/driver/...

      - name: Generate coverage report
        run: |
          go tool cover -func=coverage.out > coverage.txt
          echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out | tail -1 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out,./coverage-tracking.out,./coverage-payment.out,./coverage-vehicle.out,./coverage-driver.out
          flags: unittests
          name: codecov-fleettracker
          fail_ci_if_error: false

      - name: Check test coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 75" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below threshold 75%"
            exit 1
          fi
          echo "✅ Coverage $COVERAGE% meets threshold"

  lint:
    name: Run Linters
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Build application
        run: |
          go build -v -o fleettracker-server ./cmd/server

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fleettracker-server
          path: fleettracker-server
          retention-days: 7

